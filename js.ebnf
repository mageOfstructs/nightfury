statement ::= ( ( decl | assignment | fncall ) ';' ) | if | block | for | while;

decl ::= ( 'let' | 'var' | 'const' ) identifier '=' value;
identifier ::= #'[a-zA-Z][a-zA-Z0-9]*';
literal ::= 'null' | 'undefined' | number | string | bool | function;
bool ::= 'true' | 'false';
number ::= #'[0-9]*(\\.[0-9*])?';
string ::= quote #'.*' quote;
quote ::= ( '\\'' | '"' | '`' );
function ::= 'function' ( identifier )? '(' ( identifier_list )? ')' block;
identifier_list ::= identifier { ',' identifier };

assignment ::= ( incdec )? identifier ( aop value ) | incdec;
aop ::= '=' | '+=' | '-=' | '*=' | '/=';
incdec ::= ( '++' | '--' );

value ::= literal | identifier;
block ::= '{' { statement } '}';

if ::= 'if (' condition ')' block;
condition ::= identifier { boolop ' ' identifier };
boolop ::= '&&' | '||';
while ::= 'while (' condition ')' block;
for ::= 'for (' ( decl )? ';' condition ';' assignment ')' block;
fncall ::= identifier '(' ( identifier_list )? ')';
